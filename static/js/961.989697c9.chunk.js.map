{"version":3,"file":"static/js/961.989697c9.chunk.js","mappings":"iOA0EA,UA/DqB,WAAO,IAAD,EACzB,GAAwBA,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfR,GAAW,GAFI,UAGMS,EAAAA,EAAAA,IAAYN,GAHlB,OAGTO,EAHS,OAIfZ,EAAQY,GAJO,gDAMfR,EAAS,KAAMS,SANA,yBAQfX,GAAW,GARI,4EAAH,qDAYhBQ,GACD,GAAE,CAACL,EAASL,EAASE,EAAYE,IAElC,IACMU,GAAO,WADIC,EAAAA,EAAAA,MACKC,aAAT,eAAgBF,OAAQ,IAGrC,GAAIf,EAAM,CACR,IAAQkB,EAAuDlB,EAAvDkB,MAAOC,EAAgDnB,EAAhDmB,SAAUC,EAAsCpB,EAAtCoB,aAAcC,EAAwBrB,EAAxBqB,OAAQC,EAAgBtB,EAAhBsB,YACzCC,EAAOC,KAAKC,MAAqB,GAAfL,GAElBM,EAAiBL,EAAOM,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvC,OAAO,wBAAcA,GAALD,EACjB,IAEKE,EAASR,EAAW,8CACiBA,GACvC,GACJ,OACE,iCACE,mBAAQS,QAfC,kBAAMvB,EAASO,EAAf,EAeT,uBACA,4BACE,gBAAKiB,IAAKF,EAAQG,IAAKf,EAAOgB,MAAM,WACpC,uBAAIhB,KACJ,yBAAIK,EAAJ,QACA,uBAAIJ,KACJ,wBAAKO,KACL,SAAC,KAAD,CAAMT,MAAO,CAAEF,KAAAA,GAAQoB,GAAE,kBAAa7B,EAAb,SAAzB,UACE,sCAEF,SAAC,KAAD,CAAMW,MAAO,CAAEF,KAAAA,GAAQoB,GAAE,kBAAa7B,EAAb,YAAzB,UACE,yCAEF,SAAC,KAAD,IACCJ,IAAW,4CACXE,IAAS,oDAIjB,CACF,C,sLCtEKgC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,SAAU,WAIRC,EAAU,mCAEHC,EAAoB,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACfP,EAASQ,IAAI,qBAAsB,CACpDL,OAAQ,CACNE,QAAAA,EACAE,KAAAA,KAJ8B,cAC5BE,EAD4B,yBAQ3BA,EAAKA,KAAKC,SARiB,2CAAH,qDAWpBlC,EAAW,mCAAG,WAAMgB,GAAN,uFACNQ,EAASQ,IAAT,gBAAsBhB,GAAM,CAC7CW,OAAQ,CACNE,QAAAA,KAHqB,cACnBI,EADmB,yBAMlBA,EAAKA,MANa,2CAAH,sDASXE,EAAkB,mCAAG,WAAMnB,GAAN,uFACbQ,EAASQ,IAAT,gBAAsBhB,EAAtB,YAAoC,CACrDW,OAAQ,CACNE,QAAAA,KAH4B,cAC1BI,EAD0B,yBAMzBA,EAAKA,KAAKG,MANe,2CAAH,sDASlBC,EAAkB,mCAAG,WAAMrB,GAAN,uFACbQ,EAASQ,IAAT,gBAAsBhB,EAAtB,YAAoC,CACrDW,OAAQ,CACNE,QAAAA,KAH4B,cAC1BI,EAD0B,yBAMzBA,EAAKA,KAAKC,SANe,2CAAH,sDASlBI,EAAiB,mCAAG,WAAOC,GAAP,4FAAcR,EAAd,+BAAqB,EAArB,SACZP,EAASQ,IAAT,eAA6B,CAC9CL,OAAQ,CACNE,QAAAA,EACAU,MAAAA,EACAR,KAAAA,KAL2B,cACzBE,EADyB,yBAQxBA,EAAKA,KAAKC,SARc,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.jsx","shared/Services/filmApi.js"],"sourcesContent":["import {\n  useParams,\n  useNavigate,\n  Link,\n  Outlet,\n  useLocation,\n} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getFilmById } from '../../shared/Services/filmApi';\n\nconst MovieDetails = () => {\n  const [film, setFilm] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchFilms = async () => {\n      try {\n        setLoading(true);\n        const result = await getFilmById(movieId);\n        setFilm(result);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchFilms();\n  }, [movieId, setFilm, setLoading, setError]);\n\n  const location = useLocation();\n  const from = location.state?.from || '/';\n  const goBack = () => navigate(from);\n\n  if (film) {\n    const { title, overview, vote_average, genres, poster_path } = film;\n    const vote = Math.round(vote_average * 10);\n\n    const genresElemetns = genres.map(({ id, name }) => {\n      return <li key={id}>{name}</li>;\n    });\n\n    const imgUrl = poster_path\n      ? `https://image.tmdb.org/t/p/original/${poster_path}`\n      : '';\n    return (\n      <>\n        <button onClick={goBack}> Go back</button>\n        <div>\n          <img src={imgUrl} alt={title} width=\"200px\" />\n          <p>{title}</p>\n          <p>{vote}%</p>\n          <p>{overview}</p>\n          <ul>{genresElemetns}</ul>\n          <Link state={{ from }} to={`/movies/${movieId}/cast`}>\n            <span>Cast</span>\n          </Link>\n          <Link state={{ from }} to={`/movies/${movieId}/reviews`}>\n            <span>Reviews</span>\n          </Link>\n          <Outlet />\n          {loading && <p>...loading films</p>}\n          {error && <p>...films load faild</p>}\n        </div>\n      </>\n    );\n  }\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    language: 'en-US',\n  },\n});\n\nconst api_key = '7c4c8eade83a7a9829861e0d1ff26425';\n\nexport const getDailyPopularFilms = async (page = 1) => {\n  const data = await instance.get('trending/movie/day', {\n    params: {\n      api_key,\n      page,\n    },\n  });\n\n  return data.data.results;\n};\n\nexport const getFilmById = async id => {\n  const data = await instance.get(`movie/${id}`, {\n    params: {\n      api_key,\n    },\n  });\n  return data.data;\n};\n\nexport const getFilmCreditsById = async id => {\n  const data = await instance.get(`movie/${id}/credits`, {\n    params: {\n      api_key,\n    },\n  });\n  return data.data.cast;\n};\n\nexport const getFilmReviewsById = async id => {\n  const data = await instance.get(`movie/${id}/reviews`, {\n    params: {\n      api_key,\n    },\n  });\n  return data.data.results;\n};\n\nexport const getFilmByKeyWords = async (query, page = 1) => {\n  const data = await instance.get(`search/movie`, {\n    params: {\n      api_key,\n      query,\n      page,\n    },\n  });\n  return data.data.results;\n};\n"],"names":["useState","film","setFilm","loading","setLoading","error","setError","movieId","useParams","navigate","useNavigate","useEffect","fetchFilms","getFilmById","result","message","from","useLocation","state","title","overview","vote_average","genres","poster_path","vote","Math","round","genresElemetns","map","id","name","imgUrl","onClick","src","alt","width","to","instance","axios","baseURL","params","language","api_key","getDailyPopularFilms","page","get","data","results","getFilmCreditsById","cast","getFilmReviewsById","getFilmByKeyWords","query"],"sourceRoot":""}